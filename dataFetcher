// DataFetcher.js
import React, { useEffect, useState } from 'react';

const DataFetcher = () => {
    const [data, setData] = useState([]); // State to hold the fetched data
    const [loading, setLoading] = useState(true); // State to manage loading state
    const [error, setError] = useState(null); // State to manage error state

    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await fetch('http://localhost:8080/api/entities'); // Adjust the URL to your API
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const jsonData = await response.json(); // Convert response to JSON
                setData(jsonData); // Update state with the fetched data
                setLoading(false); // Set loading to false
            } catch (error) {
                setError(error); // Update error state
                setLoading(false); // Set loading to false
            }
        };

        fetchData(); // Call the fetch function
    }, []); // Empty dependency array means this runs once on component mount

    if (loading) return <div>Loading...</div>; // Show loading message
    if (error) return <div>Error fetching data: {error.message}</div>; // Show error message

    return (
        <div>
            <h1>Data from API</h1>
            <pre>{JSON.stringify(data, null, 2)}</pre> {/* Display the JSON data */}
        </div>
    );
};

export default DataFetcher;
