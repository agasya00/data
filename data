<dependency>
    <groupId>org.mockito</groupId>
    <artifactId>mockito-core</artifactId>
    <version>4.0.0</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.powermock</groupId>
    <artifactId>powermock-module-junit4</artifactId>
    <version>2.0.9</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.powermock</groupId>
    <artifactId>powermock-api-mockito2</artifactId>
    <version>2.0.9</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>com.opencsv</groupId>
    <artifactId>opencsv</artifactId>
    <version>5.5.2</version>
</dependency>


import com.opencsv.CSVReader;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import java.io.FileReader;
import java.io.IOException;

import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(PowerMockRunner.class)
@PrepareForTest({MyService.class, FileReader.class})
public class MyServiceTest {

    @Mock
    private CSVReader csvReader;

    @Mock
    private FileReader fileReader;

    @Before
    public void setUp() throws Exception {
        // Mock the constructor of FileReader to return the mock fileReader
        PowerMockito.whenNew(FileReader.class).withArguments(anyString()).thenReturn(fileReader);
        // Mock the constructor of CSVReader to return the mock csvReader
        PowerMockito.whenNew(CSVReader.class).withArguments(fileReader).thenReturn(csvReader);
    }

    @Test
    public void testProcessCsv() throws IOException {
        // Arrange
        String filePath = "test.csv";
        when(csvReader.readNext()).thenReturn(new String[]{"column1", "column2"}, (String[]) null);

        // Act
        MyService myService = new MyService();
        myService.processCsv(filePath);

        // Assert
        verify(csvReader, times(2)).readNext(); // verify that readNext was called twice
    }
}
